/*
 * SyntaxLang - A simple programming language written in Java
 * Copyright (C) 2021SyntaxError
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.If not, see <https://www.gnu.org/licenses/>.
 */
package at.syntaxerror.syntaxlang.string;

import lombok.experimental.UtilityClass;

/**
 * adapted from <a href=https://github.com/ArthurSonzogni/FTXUI/blob/master/src/ftxui/screen/wcwidth.cpp>
 * https://github.com/ArthurSonzogni/FTXUI/blob/master/src/ftxui/screen/wcwidth.cpp</a>
 * 
 * @author SyntaxError
 * 
 */
@UtilityClass
final class WCWidthData {

	private static final int[][] DATA = {
			{ 0x0300,	0x036F },	{ 0x0483,	0x0486 },
			{ 0x0591,	0x05BD },	{ 0x05BF,	0x05BF },
			{ 0x05C4,	0x05C5 },	{ 0x05C7,	0x05C7 },
			{ 0x0610,	0x0615 },	{ 0x064B,	0x065E },
			{ 0x06D6,	0x06E4 },	{ 0x06E7,	0x06E8 },
			{ 0x070F,	0x070F },	{ 0x0711,	0x0711 },
			{ 0x07A6,	0x07B0 },	{ 0x07EB,	0x07F3 },
			{ 0x093C,	0x093C },	{ 0x0941,	0x0948 },
			{ 0x0951,	0x0954 },	{ 0x0962,	0x0963 },
			{ 0x09BC,	0x09BC },	{ 0x09C1,	0x09C4 },
			{ 0x09E2,	0x09E3 },	{ 0x0A01,	0x0A02 },
			{ 0x0A41,	0x0A42 },	{ 0x0A47,	0x0A48 },
			{ 0x0A70,	0x0A71 },	{ 0x0A81,	0x0A82 },
			{ 0x0AC1,	0x0AC5 },	{ 0x0AC7,	0x0AC8 },
			{ 0x0AE2,	0x0AE3 },	{ 0x0B01,	0x0B01 },
			{ 0x0B3F,	0x0B3F },	{ 0x0B41,	0x0B43 },
			{ 0x0B56,	0x0B56 },	{ 0x0B82,	0x0B82 },
			{ 0x0BCD,	0x0BCD },	{ 0x0C3E,	0x0C40 },
			{ 0x0C4A,	0x0C4D },	{ 0x0C55,	0x0C56 },
			{ 0x0CBF,	0x0CBF },	{ 0x0CC6,	0x0CC6 },
			{ 0x0CE2,	0x0CE3 },	{ 0x0D41,	0x0D43 },
			{ 0x0DCA,	0x0DCA },	{ 0x0DD2,	0x0DD4 },
			{ 0x0E31,	0x0E31 },	{ 0x0E34,	0x0E3A },
			{ 0x0EB1,	0x0EB1 },	{ 0x0EB4,	0x0EB9 },
			{ 0x0EC8,	0x0ECD },	{ 0x0F18,	0x0F19 },
			{ 0x0F37,	0x0F37 },	{ 0x0F39,	0x0F39 },
			{ 0x0F80,	0x0F84 },	{ 0x0F86,	0x0F87 },
			{ 0x0F99,	0x0FBC },	{ 0x0FC6,	0x0FC6 },
			{ 0x1032,	0x1032 },	{ 0x1036,	0x1037 },
			{ 0x1058,	0x1059 },	{ 0x1160,	0x11FF },
			{ 0x1712,	0x1714 },	{ 0x1732,	0x1734 },
			{ 0x1772,	0x1773 },	{ 0x17B4,	0x17B5 },
			{ 0x17C6,	0x17C6 },	{ 0x17C9,	0x17D3 },
			{ 0x180B,	0x180D },	{ 0x18A9,	0x18A9 },
			{ 0x1927,	0x1928 },	{ 0x1932,	0x1932 },
			{ 0x1A17,	0x1A18 },	{ 0x1B00,	0x1B03 },
			{ 0x1B36,	0x1B3A },	{ 0x1B3C,	0x1B3C },
			{ 0x1B6B,	0x1B73 },	{ 0x1DC0,	0x1DCA },
			{ 0x200B,	0x200F },	{ 0x202A,	0x202E },
			{ 0x206A,	0x206F },	{ 0x20D0,	0x20EF },
			{ 0x3099,	0x309A },	{ 0xA806,	0xA806 },
			{ 0xA825,	0xA826 },	{ 0xFB1E,	0xFB1E },
			{ 0xFE20,	0xFE23 },	{ 0xFEFF,	0xFEFF },
			{ 0x10A01,	0x10A03 },	{ 0x10A05,	0x10A06 },
			{ 0x10A38,	0x10A3A },	{ 0x10A3F,	0x10A3F },
			{ 0x1D173,	0x1D182 },	{ 0x1D185,	0x1D18B },
			{ 0x1D242,	0x1D244 },	{ 0xE0001,	0xE0001 },
			{ 0xE0100,	0xE01EF }
	};
	
	private static boolean bisearch(int cp) {
		int min = 0;
		int max = DATA.length - 1;
		int mid;
		
		if(cp < DATA[0][0] || cp > DATA[max][1])
			return false;
		
		while(max >= min) {
			mid = (min + max) / 2;
			
			if(cp > DATA[mid][1])
				min = mid + 1;
			else if(cp < DATA[mid][0])
				max = mid - 1;
			else return true;
		}
		
		return false;
	}
	
	static int width(int cp) {
		if(cp == 0)
			return 0;
		
		if(cp < 0x20 || (cp >= 0x7F && cp < 0xA0))
			return -1;
		
		if(bisearch(cp))
			return 0;
		
		return cp >= 0x1100 &&
	          (cp <= 0x115F ||
	           cp == 0x2329 || cp == 0x232A ||
	           (cp >= 0x2E80 && cp <= 0xA4CF && cp != 0x303F) ||
	           (cp >= 0xAC00 && cp <= 0xD7A3) ||
	           (cp >= 0xF900 &&
	            cp <= 0xFAFF) ||
	           (cp >= 0xFE10  && cp <= 0xFE19) ||
	           (cp >= 0xFE30  && cp <= 0xFE6F) ||
	           (cp >= 0xFF00  && cp <= 0xFF60) ||
	           (cp >= 0xFFE0  && cp <= 0xFFE6) ||
	           (cp >= 0x20000 && cp <= 0x2FFFD) ||
	           (cp >= 0x30000 && cp <= 0x3FFFD)) ? 2 : 1;
	}

}
